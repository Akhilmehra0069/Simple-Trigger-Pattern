/**
* ─────────────────────────────────────────────────────────────────────────────────────────────────┐
* Test class containing methods that cover code implemented by the SampleObjectTriggerHandler class.
*
* Write additional general information about the program, class, method or variable which follows
* this comment block. Use as many lines as necessary, but keep each line within the 100 character
* wide box defined by the top ───┐ and bottom ───┘ brackets.
* ──────────────────────────────────────────────────────────────────────────────────────────────────
* @author         Vivek M. Chawla     <Vivek_Chawla@Intuit.com>
* @modifiedBy     Vivek M. Chawla     <Vivek_Chawla@Intuit.com>
* @maintainedBy   Vivek M. Chawla     <Vivek_Chawla@Intuit.com>
* @version        1.0
* @created        YYYY-MM-DD
* @modified       YYYY-MM-DD
* @systemLayer    Test
* @see            Sample_Object__c.object
* @see            SampleObjectTrigger.trigger
* @see            SampleObjectTriggerHandler.class
* @see            TriggerHandler.class
* ──────────────────────────────────────────────────────────────────────────────────────────────────
* @changes
* vX.X            Vivek_Chawla@Intuit.com
* YYYY-MM-DD      Explanation of the change.  Multiple lines can be used to explain the change, but
*                 each line should be indented till left aligned with the previous description text.
*
* vX.X            Vivek_Chawla@Intuit.com
* YYYY-MM-DD      Explanation of the change.  Multiple lines can be used to explain the change, but
*                 each line should be indented till left aligned with the previous description text.
* ─────────────────────────────────────────────────────────────────────────────────────────────────┘
*/
@isTest
private class SampleObjectTriggerHandlerTest {
  /**
  * ───────────────────────────────────────────────────────────────────────────────────────────────┐
  * Write a single, summary sentence for this test method.
  *
  * Write additional general information about this test method. Describe the functionality that
  * this method is designed to test, including both positive and negative test cases.
  *
  * While writing this comment, use as many lines as necessary, but keep each line within the 100
  * character wide box defined by the top ───┐ and bottom ───┘ brackets.
  * ────────────────────────────────────────────────────────────────────────────────────────────────
  * Test Method Naming Conventions:
  * 
  * All methods marked by the @testMethod annotation should be named in a manner that describes the
  * functional test logic being implemented by using the following pattern:
  *
  *   MethodName_StateUnderTest_ExpectedBehavior
  * 
  * Examples: enrollStudent_InvalidData_ExceptionThrown(), addFollower_ValidData_Success()
  * ────────────────────────────────────────────────────────────────────────────────────────────────
  * FUNCTIONAL TEST LOGIC
  * ────────────────────────────────────────────────────────────────────────────────────────────────
  * 
  * PLEASE FOLLOW THIS LAYOUT EXAMPLE:
  *
  * 1. Step one.
  *    A. Sub-step 1-A
  *    B. Sub-step 1-B
  *       > Additional details within sub-step 1-B
  * 2. Step two.
  *    A. Sub-step 2-A
  *       > Additional details within sub-step 2-A
  *       > ... (process / steps repeat)
  *       > Final detail within sub-step 2-A
  * N. Steps continue until functional logic explanation is complete.
  * ───────────────────────────────────────────────────────────────────────────────────────────────┘
  */
  static testMethod void beforeInsert_ValidData_Success() {
    //─────────────────────────────────────────────────────────────────────────┐
    // TODO: IMPLEMENT UNIT TEST
    //─────────────────────────────────────────────────────────────────────────┘
    return;
  }
  /**
  * ───────────────────────────────────────────────────────────────────────────────────────────────┐
  * If you can't use the ideal template above, just write a quick summary of what is being tested.
  * Use the same naming conventions detailed in the example above.
  * ───────────────────────────────────────────────────────────────────────────────────────────────┘
  */
  static testMethod void beforeUpdate_ValidData_Success() {
    //─────────────────────────────────────────────────────────────────────────┐
    // TODO: IMPLEMENT UNIT TEST
    //─────────────────────────────────────────────────────────────────────────┘
    return;
  }
  /**
  * ───────────────────────────────────────────────────────────────────────────────────────────────┐
  * If you can't use the ideal template above, just write a quick summary of what is being tested.
  * Use the same naming conventions detailed in the example above.
  * ───────────────────────────────────────────────────────────────────────────────────────────────┘
  */
  static testMethod void beforeDelete_ValidData_Success() {
    //─────────────────────────────────────────────────────────────────────────┐
    // TODO: IMPLEMENT UNIT TEST
    //─────────────────────────────────────────────────────────────────────────┘
    return;
  }
  /**
  * ───────────────────────────────────────────────────────────────────────────────────────────────┐
  * If you can't use the ideal template above, just write a quick summary of what is being tested.
  * Use the same naming conventions detailed in the example above.
  * ───────────────────────────────────────────────────────────────────────────────────────────────┘
  */
  static testMethod void afterInsert_ValidData_Success() {
    //─────────────────────────────────────────────────────────────────────────┐
    // TODO: IMPLEMENT UNIT TEST
    //─────────────────────────────────────────────────────────────────────────┘
    return;
  }
  /**
  * ───────────────────────────────────────────────────────────────────────────────────────────────┐
  * If you can't use the ideal template above, just write a quick summary of what is being tested.
  * Use the same naming conventions detailed in the example above.
  * ───────────────────────────────────────────────────────────────────────────────────────────────┘
  */
  static testMethod void afterUpdate_ValidData_Success() {
    //─────────────────────────────────────────────────────────────────────────┐
    // TODO: IMPLEMENT UNIT TEST
    //─────────────────────────────────────────────────────────────────────────┘
    return;
  }
  /**
  * ───────────────────────────────────────────────────────────────────────────────────────────────┐
  * If you can't use the ideal template above, just write a quick summary of what is being tested.
  * Use the same naming conventions detailed in the example above.
  * ───────────────────────────────────────────────────────────────────────────────────────────────┘
  */
  static testMethod void afterDelete_ValidData_Success() {
    //─────────────────────────────────────────────────────────────────────────┐
    // TODO: IMPLEMENT UNIT TEST
    //─────────────────────────────────────────────────────────────────────────┘
    return;
  }
  /**
  * ───────────────────────────────────────────────────────────────────────────────────────────────┐
  * If you can't use the ideal template above, just write a quick summary of what is being tested.
  * Use the same naming conventions detailed in the example above.
  * ───────────────────────────────────────────────────────────────────────────────────────────────┘
  */
  static testMethod void afterUndelete_ValidData_Success() {
    //─────────────────────────────────────────────────────────────────────────┐
    // TODO: IMPLEMENT UNIT TEST
    //─────────────────────────────────────────────────────────────────────────┘
    return;
  }
}
